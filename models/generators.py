import tensorflow as tf
from tensorflow.keras import Model


class Generator(Model):
    """ The definition for a network which
        fabricates images from a noisy distribution.
    """
    def __init__(self, img_size, num_latent_dims):
        """ Initialise a Generator instance.
                Arguments:
                img_size : tuple of ints
                    Size of images. E.g. (1, 32, 32) or (3, 64, 64).
                num_latent_dims : int
                    Dimensionality of latent input.
        """
        super().__init__()
        self.img_size = img_size
        self.num_latent_dims = num_latent_dims
        self.xent_loss_fn = tf.keras.losses.BinaryCrossentropy(from_logits=False)
        self.optimizer = tf.keras.optimizers.Adam(1e-4)

    def call(self):
        pass

def loss(self, predictions_on_fake):
    """ Only calculate the loss based on the discriminator
        predictions for the images generated by this model.
    """
    return self.xent_loss_fn(tf.ones_like(predictions_on_fake), predictions_on_fake)